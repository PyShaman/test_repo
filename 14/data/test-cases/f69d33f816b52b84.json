{"uid":"f69d33f816b52b84","name":"test_015_negative_reject_insufficient_permission_delete[customer@practicesoftwaretesting.com]","fullName":"tests.test_brands_microservice.TestBrandsMicroservice#test_015_negative_reject_insufficient_permission_delete","historyId":"f62255ce5831ce3b702296ec7fb26315","time":{"start":1684311584375,"stop":1684311584769,"duration":394},"description":"\nTest type: Positive and Negative\n\nTest microservice: Brands\n\nTest description: Suite is responsible for verifying proper functionality for /brands microservice.\n\nEndpoint: GET /brands\nDescription: This endpoint allows you to retrieve a list of brands from the system. The response contains detailed\ninformation about each brand, such as name, identifier (ID) and other brand-related data. This is useful for displaying\nthe list of brands in the user interface or other operations that require access to brand information.\n\nEndpoint: POST /brands Description: This endpoint allows you to add a new brand to the system. It requires the \nsubmission of brand data, such as name and other related information. Once the brand is successfully created, \nthe response contains the identifier (ID) of the created brand and other details.\n\nEndpoint: GET /brands/{id}\nDescription: This endpoint allows you to retrieve detailed information about a specific brand based on its identifier\n(ID). It returns all available brand data, such as name, ID and other related information.\n\nEndpoint: PUT /brands/{id}\nDescription: This endpoint allows updating the data of a specific brand based on its identifier (ID). It requires the\nupdated brand data to be passed, which will be applied to the existing brand information. After a successful update,\nthe response contains the updated brand details.\n\nEndpoint: DELETE /brands/{id}\nDescription: This endpoint allows you to delete a specific brand based on its identifier (ID). After successful\ndeletion, the response confirms the deletion operation.\n","descriptionHtml":"<p>Test type: Positive and Negative</p>\n<p>Test microservice: Brands</p>\n<p>Test description: Suite is responsible for verifying proper functionality for /brands microservice.</p>\n<p>Endpoint: GET /brands<br />\nDescription: This endpoint allows you to retrieve a list of brands from the system. The response contains detailed<br />\ninformation about each brand, such as name, identifier (ID) and other brand-related data. This is useful for displaying<br />\nthe list of brands in the user interface or other operations that require access to brand information.</p>\n<p>Endpoint: POST /brands Description: This endpoint allows you to add a new brand to the system. It requires the<br />\nsubmission of brand data, such as name and other related information. Once the brand is successfully created,<br />\nthe response contains the identifier (ID) of the created brand and other details.</p>\n<p>Endpoint: GET /brands/{id}<br />\nDescription: This endpoint allows you to retrieve detailed information about a specific brand based on its identifier<br />\n(ID). It returns all available brand data, such as name, ID and other related information.</p>\n<p>Endpoint: PUT /brands/{id}<br />\nDescription: This endpoint allows updating the data of a specific brand based on its identifier (ID). It requires the<br />\nupdated brand data to be passed, which will be applied to the existing brand information. After a successful update,<br />\nthe response contains the updated brand details.</p>\n<p>Endpoint: DELETE /brands/{id}<br />\nDescription: This endpoint allows you to delete a specific brand based on its identifier (ID). After successful<br />\ndeletion, the response confirms the deletion operation.</p>\n","status":"passed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"token","time":{"start":1684311576796,"stop":1684311577264,"duration":468},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"create_brand","time":{"start":1684311583981,"stop":1684311584374,"duration":393},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"description":"\nTest type: Positive and Negative\n\nTest microservice: Brands\n\nTest description: Suite is responsible for verifying proper functionality for /brands microservice.\n\nEndpoint: GET /brands\nDescription: This endpoint allows you to retrieve a list of brands from the system. The response contains detailed\ninformation about each brand, such as name, identifier (ID) and other brand-related data. This is useful for displaying\nthe list of brands in the user interface or other operations that require access to brand information.\n\nEndpoint: POST /brands Description: This endpoint allows you to add a new brand to the system. It requires the \nsubmission of brand data, such as name and other related information. Once the brand is successfully created, \nthe response contains the identifier (ID) of the created brand and other details.\n\nEndpoint: GET /brands/{id}\nDescription: This endpoint allows you to retrieve detailed information about a specific brand based on its identifier\n(ID). It returns all available brand data, such as name, ID and other related information.\n\nEndpoint: PUT /brands/{id}\nDescription: This endpoint allows updating the data of a specific brand based on its identifier (ID). It requires the\nupdated brand data to be passed, which will be applied to the existing brand information. After a successful update,\nthe response contains the updated brand details.\n\nEndpoint: DELETE /brands/{id}\nDescription: This endpoint allows you to delete a specific brand based on its identifier (ID). After successful\ndeletion, the response confirms the deletion operation.\n","status":"passed","steps":[],"attachments":[{"uid":"e974977e99f366fc","name":"log","source":"e974977e99f366fc.txt","type":"text/plain","size":186}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true},"afterStages":[{"name":"create_brand::0","time":{"start":1684311584770,"stop":1684311585713,"duration":943},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"token::0","time":{"start":1684311585715,"stop":1684311585715,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_brands_microservice"},{"name":"subSuite","value":"TestBrandsMicroservice"},{"name":"host","value":"fv-az392-430"},{"name":"thread","value":"2303-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_brands_microservice"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"token","value":"'customer@practicesoftwaretesting.com'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":0,"passed":10,"unknown":0,"total":10},"items":[{"uid":"1781edce3140396","reportUrl":"https://PyShaman.github.io/test_repo/13//#testresult/1781edce3140396","status":"passed","time":{"start":1684309917897,"stop":1684309918181,"duration":284}},{"uid":"452a198db7c72f7a","reportUrl":"https://PyShaman.github.io/test_repo/12//#testresult/452a198db7c72f7a","status":"passed","time":{"start":1684309027540,"stop":1684309027823,"duration":283}},{"uid":"62fa8af78bb710ae","reportUrl":"https://PyShaman.github.io/test_repo/11//#testresult/62fa8af78bb710ae","status":"passed","time":{"start":1684308324107,"stop":1684308324389,"duration":282}},{"uid":"6c66b8cbd24d9da5","reportUrl":"https://PyShaman.github.io/test_repo/10//#testresult/6c66b8cbd24d9da5","status":"passed","time":{"start":1684307671306,"stop":1684307671714,"duration":408}},{"uid":"803fc1f963271699","reportUrl":"https://PyShaman.github.io/test_repo/9//#testresult/803fc1f963271699","status":"passed","time":{"start":1684306355184,"stop":1684306355698,"duration":514}},{"uid":"dc4a47f515dd0fbd","reportUrl":"https://PyShaman.github.io/test_repo/8//#testresult/dc4a47f515dd0fbd","status":"passed","time":{"start":1684305428413,"stop":1684305428705,"duration":292}},{"uid":"8b8e65953db41552","reportUrl":"https://PyShaman.github.io/test_repo/7//#testresult/8b8e65953db41552","status":"passed","time":{"start":1684304360598,"stop":1684304360898,"duration":300}},{"uid":"2184dd3acfde0df","reportUrl":"https://PyShaman.github.io/test_repo/6//#testresult/2184dd3acfde0df","status":"passed","time":{"start":1684302769873,"stop":1684302770262,"duration":389}},{"uid":"120cbdcf86cb0103","reportUrl":"https://PyShaman.github.io/test_repo/5//#testresult/120cbdcf86cb0103","status":"passed","time":{"start":1684301304015,"stop":1684301304535,"duration":520}}]},"tags":[]},"source":"f69d33f816b52b84.json","parameterValues":["'customer@practicesoftwaretesting.com'"]}